name: Release scrcpy-mask

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codes
        uses: actions/checkout@v5.0.0
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml
      - name: Build frontend
        shell: bash
        run: |
          cd frontend
          pnpm install
          pnpm build
      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-web-assets
          path: assets/web

  windows:
    runs-on: ${{ matrix.os }}
    needs: build-frontend
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            platform: windows-x64
            
    steps:
      - name: Checkout codes
        uses: actions/checkout@v5.0.0

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-web-assets
          path: assets/web

      - name: Set up msvc
        uses: ilammy/msvc-dev-cmd@v1
      - name: Set up msys
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            make
            diffutils
            yasm
            pkg-config
          path-type: inherit

      - name: Cache FFmpeg build
        id: ffmpeg-cache
        uses: actions/cache@v4
        with:
          path: ffmpeg-7.1.2/ffmpeg-${{ matrix.platform }}
          key: ffmpeg-${{ matrix.platform }}-7.1.2-v0.4

      - name: Download and build FFmpeg (if not cached)
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          OS=${{ matrix.platform }}
          
          curl -L -o FFmpeg-n7.1.2.tar.gz https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n7.1.2.tar.gz
          tar -xzf FFmpeg-n7.1.2.tar.gz
          rm FFmpeg-n7.1.2.tar.gz
          mv FFmpeg-n7.1.2 ffmpeg-7.1.2
          cd ffmpeg-7.1.2

          ./configure --prefix=./ffmpeg-$OS \
              --disable-all --disable-doc --disable-iconv \
              --toolchain=msvc \
              --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=av1 \
              --enable-swscale --enable-avformat --enable-avcodec --enable-avutil --enable-swresample \
              --enable-gpl --enable-static --disable-shared

          make -j$(nproc)
          make install

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}

      - name: Build scrcpy-mask
        shell: pwsh
        run: |
          $ScriptDir = "${{ github.workspace }}"
          $OS = "${{ matrix.platform }}"
          $Prefix = "ffmpeg-$OS"
          $ProjectName = "scrcpy-mask"
          $FFMpeg = "ffmpeg-7.1.2"
          
          $env:PKG_CONFIG_PATH = "$ScriptDir\$FFMpeg\$Prefix\lib\pkgconfig"
          $env:FFMPEG_DIR = "$ScriptDir\$FFMpeg\$Prefix"

          cargo build --release

          $OutputZip = "$ScriptDir\$ProjectName-$OS.zip"
          $BuildTarget = "$ScriptDir\target\release\$ProjectName.exe"
          $AssetsDir = "$ScriptDir\assets"
          
          Write-Host "Build successful, creating zip package..."
          $OutputZip = "$ScriptDir\target\release\$ProjectName-$OS.zip"
          $BuildTarget = "$ScriptDir\target\release\$ProjectName.exe"
          $AssetsDir = "$ScriptDir\assets"
          
          $PathsToCompress = @($BuildTarget, $AssetsDir)
          Compress-Archive -Path $PathsToCompress -DestinationPath $OutputZip -Force

          "OUTPUT_ZIP=$OutputZip"   | Out-File -FilePath $env:GITHUB_ENV -Append
          "OUTPUT_NAME=$($ProjectName)-$OS" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.OUTPUT_ZIP }}
          name: ${{ env.OUTPUT_NAME }}

  macos:
    runs-on: ${{ matrix.os }}
    needs: build-frontend
    strategy:
      matrix:
        os: [macos-latest]
        include:
          - os: macos-latest
            platform: macos-arm64
            
    steps:
      - name: Checkout codes
        uses: actions/checkout@v5.0.0

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-web-assets
          path: assets/web

      - name: Cache FFmpeg build
        id: ffmpeg-cache
        uses: actions/cache@v4
        with:
          path: ffmpeg-7.1.2/ffmpeg-${{ matrix.platform }}
          key: ffmpeg-${{ matrix.platform }}-7.1.2-v0.4

      - name: Download and build FFmpeg (if not cached)
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          OS=${{ matrix.platform }}
          
          curl -L -o FFmpeg-n7.1.2.tar.gz https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n7.1.2.tar.gz
          tar -xzf FFmpeg-n7.1.2.tar.gz
          rm FFmpeg-n7.1.2.tar.gz
          mv FFmpeg-n7.1.2 ffmpeg-7.1.2
          cd ffmpeg-7.1.2

          ./configure --prefix=./ffmpeg-$OS \
              --disable-all --disable-doc --disable-iconv \
              --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=av1 \
              --enable-swscale --enable-avformat --enable-avcodec --enable-avutil --enable-swresample \
              --enable-gpl --enable-static --disable-shared
              
          make -j$(sysctl -n hw.ncpu)
          make install

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}

      - name: Build scrcpy-mask
        shell: bash
        run: |
          SCRIPT_DIR="${{ github.workspace }}"
          FFMPEG="ffmpeg-7.1.2"
          OS="${{ matrix.platform }}"
          PREFIX="ffmpeg-$OS"
          PROJECT_NAME="scrcpy-mask"
          
          export PKG_CONFIG_PATH="$SCRIPT_DIR/$FFMPEG/$PREFIX/lib/pkgconfig"
          export FFMPEG_DIR="$SCRIPT_DIR/$FFMPEG/$PREFIX"

          cargo build --release

          ASSETS_DIR="$SCRIPT_DIR/assets"

          cargo install cargo-bundle
          export CARGO_BUNDLE_SKIP_BUILD="1"
          cargo bundle -r

          echo "Adjusting bundle files..."
          BUNDLE_DIR="$SCRIPT_DIR/target/release/bundle/osx/$PROJECT_NAME.app"
          DMG_PATH="$SCRIPT_DIR/$PROJECT_NAME-$OS.dmg"
          APP_BIN_DIR="$BUNDLE_DIR/Contents/MacOS"
          mv "$APP_BIN_DIR/$PROJECT_NAME" "$APP_BIN_DIR/$PROJECT_NAME-bin"
          cat > "$APP_BIN_DIR/$PROJECT_NAME" << 'EOF'
          #!/bin/bash

          APP_DIR="$(cd "$(dirname "$0")" && pwd)"

          CMD="cd $APP_DIR && ./scrcpy-mask-bin; echo 'Done. Press any key to exit...'; read"

          osascript -e "tell application \"Terminal\" to do script \"$CMD\""
          osascript -e "tell application \"Terminal\" to activate"
          EOF
          chmod +x "$APP_BIN_DIR/scrcpy-mask"
          cp -R "$ASSETS_DIR" "$APP_BIN_DIR/"

          rm -f "$DMG_PATH"
          brew install create-dmg
          create-dmg \
              --volname "scrcpy-mask" \
              --volicon "./icons/icon.icns" \
              --window-pos 200 120 \
              --window-size 600 300 \
              --icon "scrcpy-mask.app" 150 100 \
              --app-drop-link 450 100 \
              "$DMG_PATH" "$BUNDLE_DIR"

          echo "OUTPUT_DMG=$DMG_PATH" >> $GITHUB_ENV
          echo "OUTPUT_NAME=$PROJECT_NAME-$OS" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.OUTPUT_DMG }}
          name: ${{ env.OUTPUT_NAME }}

  linux:
    runs-on: ${{ matrix.os }}
    needs: build-frontend
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            platform: linux-x64
            
    steps:
      - name: Checkout codes
        uses: actions/checkout@v5.0.0

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-web-assets
          path: assets/web
          
      - name: Cache FFmpeg build
        id: ffmpeg-cache
        uses: actions/cache@v4
        with:
          path: ffmpeg-7.1.2/ffmpeg-${{ matrix.platform }}
          key: ffmpeg-${{ matrix.platform }}-7.1.2-v0.4

      - name: Download and build FFmpeg (if not cached)
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            autoconf automake build-essential cmake git-core \
            libass-dev libfreetype6-dev libgnutls28-dev libmp3lame-dev libsdl2-dev libtool \
            libx11-dev libva-dev libvdpau-dev libdrm-dev\
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            ninja-build \
            pkg-config \
            texinfo \
            yasm \
            zlib1g-dev

          OS=${{ matrix.platform }}
          
          curl -L -o FFmpeg-n7.1.2.tar.gz https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n7.1.2.tar.gz
          tar -xzf FFmpeg-n7.1.2.tar.gz
          rm FFmpeg-n7.1.2.tar.gz
          mv FFmpeg-n7.1.2 ffmpeg-7.1.2
          cd ffmpeg-7.1.2

          ./configure --prefix=./ffmpeg-$OS \
              --disable-all --disable-doc --disable-iconv \
              --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=av1 \
              --enable-swscale --enable-avformat --enable-avcodec --enable-avutil --enable-swresample \
              --enable-gpl --enable-static --disable-shared
              
          make -j$(nproc)
          make install
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}

      - name: Build scrcpy-mask
        shell: bash
        run: |
          sudo apt-get update

          SCRIPT_DIR="${{ github.workspace }}"
          FFMPEG="ffmpeg-7.1.2"
          OS="${{ matrix.platform }}"
          PREFIX="ffmpeg-$OS"
          PROJECT_NAME="scrcpy-mask"
          
          export PKG_CONFIG_PATH="$SCRIPT_DIR/$FFMPEG/$PREFIX/lib/pkgconfig"
          export FFMPEG_DIR="$SCRIPT_DIR/$FFMPEG/$PREFIX"

          cargo build --release

          ASSETS_DIR="$SCRIPT_DIR/assets"
          BUNDLE_DIR="$SCRIPT_DIR/tmp"
          mkdir -p "$BUNDLE_DIR"
          cp -R "$ASSETS_DIR" "$BUNDLE_DIR/"
          BUILD_TARGET="$SCRIPT_DIR/target/release/$PROJECT_NAME"
          cp "$BUILD_TARGET" "$BUNDLE_DIR/"

          OUTPUT_ZIP="$SCRIPT_DIR/$PROJECT_NAME-$OS.zip"
          rm -f "$OUTPUT_ZIP"
          
          cd "$BUNDLE_DIR"
          zip -r "$OUTPUT_ZIP" ./*
          rm -rf "$BUNDLE_DIR"
          cd "$SCRIPT_DIR"

          echo "OUTPUT_ZIP=$OUTPUT_ZIP" >> $GITHUB_ENV
          echo "OUTPUT_NAME=$PROJECT_NAME-$OS" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.OUTPUT_ZIP }}
          name: ${{ env.OUTPUT_NAME }}

  release:
    needs: [macos, linux, windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v5
      - name: List downloaded files
        run: ls -R
  
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            scrcpy-mask-linux-x64/**
            scrcpy-mask-windows-x64/**
            scrcpy-mask-macos-arm64/**
